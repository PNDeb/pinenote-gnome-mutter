From: =?utf-8?q?Jonas_=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 16 Aug 2023 00:09:09 +0200
Subject: window: Postpone focusing until grab ended if uninteractable

When GNOME Shell is in the overview, we don't want windows to steal
focus left and right, but once we leave the overview, we do want
whatever was mapped with "take_focus" to get focus. Do that, but after
the last grab was dismissed.

Bug: https://gitlab.gnome.org/GNOME/mutter/-/issues/2690
Bug-Debian: https://bugs.debian.org/1035092
Bug-Debian: https://bugs.debian.org/1049934
Forwarded: https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3186
Applied-upstream: 45, commit:05eeb684d1f990a0b5cedf28a65fbe14980f8fcf
---
 src/core/display-private.h |  3 +++
 src/core/display.c         | 59 ++++++++++++++++++++++++++++++++++++++++++++++
 src/core/window.c          | 14 ++++-------
 3 files changed, 66 insertions(+), 10 deletions(-)

diff --git a/src/core/display-private.h b/src/core/display-private.h
index 4eff0b7..72606ac 100644
--- a/src/core/display-private.h
+++ b/src/core/display-private.h
@@ -304,6 +304,9 @@ void meta_display_cancel_touch (MetaDisplay *display);
 
 gboolean meta_display_windows_are_interactable (MetaDisplay *display);
 
+void meta_display_queue_focus (MetaDisplay *display,
+                               MetaWindow  *window);
+
 void meta_display_show_tablet_mapping_notification (MetaDisplay        *display,
                                                     ClutterInputDevice *pad,
                                                     const gchar        *pretty_name);
diff --git a/src/core/display.c b/src/core/display.c
index eca1c0f..55fc9e1 100644
--- a/src/core/display.c
+++ b/src/core/display.c
@@ -135,6 +135,11 @@ typedef struct _MetaDisplayPrivate
 
   guint queue_later_ids[META_N_QUEUE_TYPES];
   GList *queue_windows[META_N_QUEUE_TYPES];
+
+  struct {
+    MetaWindow *window;
+    gulong unmanaging_handler_id;
+  } focus_on_grab_dismissed;
 } MetaDisplayPrivate;
 
 G_DEFINE_TYPE_WITH_PRIVATE (MetaDisplay, meta_display, G_TYPE_OBJECT)
@@ -203,6 +208,10 @@ meta_display_show_osd (MetaDisplay *display,
                        const gchar *icon_name,
                        const gchar *message);
 
+static void on_is_grabbed_changed (ClutterStage *stage,
+                                   GParamSpec   *pspec,
+                                   MetaDisplay  *display);
+
 static MetaBackend *
 backend_from_display (MetaDisplay *display)
 {
@@ -854,6 +863,7 @@ meta_display_new (MetaContext  *context,
                   GError      **error)
 {
   MetaBackend *backend = meta_context_get_backend (context);
+  ClutterActor *stage = meta_backend_get_stage (backend);
   MetaDisplay *display;
   MetaDisplayPrivate *priv;
   guint32 timestamp;
@@ -1005,6 +1015,9 @@ meta_display_new (MetaContext  *context,
       meta_display_unset_input_focus (display, timestamp);
     }
 
+  g_signal_connect (stage, "notify::is-grabbed",
+                    G_CALLBACK (on_is_grabbed_changed), display);
+
   display->sound_player = g_object_new (META_TYPE_SOUND_PLAYER, NULL);
 
   /* Done opening new display */
@@ -1226,6 +1239,52 @@ meta_display_windows_are_interactable (MetaDisplay *display)
   return TRUE;
 }
 
+static void
+on_is_grabbed_changed (ClutterStage *stage,
+                       GParamSpec   *pspec,
+                       MetaDisplay  *display)
+{
+  MetaDisplayPrivate *priv = meta_display_get_instance_private (display);
+
+  if (!priv->focus_on_grab_dismissed.window)
+    return;
+
+  meta_window_focus (priv->focus_on_grab_dismissed.window, META_CURRENT_TIME);
+
+  g_clear_signal_handler (&priv->focus_on_grab_dismissed.unmanaging_handler_id,
+                          priv->focus_on_grab_dismissed.window);
+  priv->focus_on_grab_dismissed.window = NULL;
+}
+
+static void
+focus_on_grab_dismissed_unmanaging_cb (MetaWindow  *window,
+                                       MetaDisplay *display)
+{
+  MetaDisplayPrivate *priv = meta_display_get_instance_private (display);
+
+  g_return_if_fail (priv->focus_on_grab_dismissed.window == window);
+
+  g_clear_signal_handler (&priv->focus_on_grab_dismissed.unmanaging_handler_id,
+                          priv->focus_on_grab_dismissed.window);
+  priv->focus_on_grab_dismissed.window = NULL;
+}
+
+void
+meta_display_queue_focus (MetaDisplay *display,
+                          MetaWindow  *window)
+{
+  MetaDisplayPrivate *priv = meta_display_get_instance_private (display);
+
+  g_clear_signal_handler (&priv->focus_on_grab_dismissed.unmanaging_handler_id,
+                          priv->focus_on_grab_dismissed.window);
+
+  priv->focus_on_grab_dismissed.window = window;
+  priv->focus_on_grab_dismissed.unmanaging_handler_id =
+    g_signal_connect (window, "unmanaging",
+                      G_CALLBACK (focus_on_grab_dismissed_unmanaging_cb),
+                      display);
+}
+
 /**
  * meta_display_xserver_time_is_before:
  * @display: a #MetaDisplay
diff --git a/src/core/window.c b/src/core/window.c
index 6c92477..abe87e7 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -2007,15 +2007,6 @@ window_state_on_map (MetaWindow *window,
       return;
     }
 
-  /* Do not focus window on map if input is already taken by the
-   * compositor.
-   */
-  if (!meta_display_windows_are_interactable (window->display))
-    {
-      *takes_focus = FALSE;
-      return;
-    }
-
   /* Terminal usage may be different; some users intend to launch
    * many apps in quick succession or to just view things in the new
    * window while still interacting with the terminal.  In that case,
@@ -2337,7 +2328,10 @@ meta_window_show (MetaWindow *window)
 
           timestamp = meta_display_get_current_time_roundtrip (window->display);
 
-          meta_window_focus (window, timestamp);
+          if (meta_display_windows_are_interactable (window->display))
+            meta_window_focus (window, timestamp);
+          else
+            meta_display_queue_focus (window->display, window);
         }
       else if (display->x11_display)
         {
